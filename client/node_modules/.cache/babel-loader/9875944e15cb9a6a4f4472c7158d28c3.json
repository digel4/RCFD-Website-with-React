{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digel\\\\Desktop\\\\repos\\\\RCFD-Website-with-React\\\\src\\\\components\\\\events\\\\eventCards\\\\ShowAllEventCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport AllEventCards from './AllEventCards';\nimport { fetchCurrEvents } from '../../../actions';\nimport { fetchPastEvents } from '../../../actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShowAllEventCards = props => {\n  _s();\n\n  const {\n    fetchCurrEvents,\n    fetchPastEvents\n  } = props;\n  useEffect(() => {\n    fetchCurrEvents();\n    fetchPastEvents();\n  }, [fetchCurrEvents, fetchPastEvents]);\n  const {\n    pathname\n  } = useLocation();\n\n  const adminControlPanel = () => {\n    if (props.token) {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/admin/createEvent\",\n        className: \"btn btn-primary btn-block\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const currEventsLoader = () => {\n    if (!props.currEvents) {\n      return 'loading';\n    } else {\n      return /*#__PURE__*/_jsxDEV(AllEventCards, {\n        token: props.token,\n        eventsList: props.currEvents,\n        previousEvents: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const pastEventsLoader = () => {\n    if (!props.pastEvents) {\n      return 'loading';\n    } else {\n      return /*#__PURE__*/_jsxDEV(AllEventCards, {\n        token: props.token,\n        eventsList: props.pastEvents,\n        previousEvents: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const eventsSelector = () => {\n    if (pathname === '/events') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: currEventsLoader()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this);\n    } else if (pathname === '/pastevents') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: pastEventsLoader()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [adminControlPanel(), eventsSelector()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ShowAllEventCards, \"phQmLxtOqIUVIYJLzR0dXkT9ZwI=\", false, function () {\n  return [useLocation];\n});\n\n_c = ShowAllEventCards;\n\nconst mapStateToProps = state => {\n  return {\n    currEvents: state.events.currEvents,\n    pastEvents: state.events.pastEvents,\n    token: state.admin.token\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchCurrEvents,\n  fetchPastEvents\n})(ShowAllEventCards);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowAllEventCards\");","map":{"version":3,"sources":["C:/Users/Digel/Desktop/repos/RCFD-Website-with-React/src/components/events/eventCards/ShowAllEventCards.js"],"names":["React","useEffect","useLocation","Link","AllEventCards","fetchCurrEvents","fetchPastEvents","connect","ShowAllEventCards","props","pathname","adminControlPanel","token","currEventsLoader","currEvents","pastEventsLoader","pastEvents","eventsSelector","mapStateToProps","state","events","admin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,kBAAlC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAKA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM;AAAEJ,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAuCG,KAA7C;AACAR,EAAAA,SAAS,CAAE,MAAM;AACbI,IAAAA,eAAe;AACfC,IAAAA,eAAe;AACjB,GAHO,EAGL,CAACD,eAAD,EAAkBC,eAAlB,CAHK,CAAT;AAMA,QAAM;AAAEI,IAAAA;AAAF,MAAeR,WAAW,EAAhC;;AAEA,QAAMS,iBAAiB,GAAG,MAAM;AAC5B,QAAGF,KAAK,CAACG,KAAT,EAAgB;AACZ,0BACI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,oBAAT;AAA8B,QAAA,SAAS,EAAC,2BAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;AACJ,GAND;;AAQA,QAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAI,CAACJ,KAAK,CAACK,UAAX,EAAuB;AACnB,aAAO,SAAP;AACH,KAFD,MAEO;AACH,0BAAO,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEL,KAAK,CAACG,KAA5B;AAAmC,QAAA,UAAU,EAAEH,KAAK,CAACK,UAArD;AAAiE,QAAA,cAAc,EAAE;AAAjF;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ,GAND;;AAQA,QAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAI,CAACN,KAAK,CAACO,UAAX,EAAuB;AACnB,aAAO,SAAP;AACH,KAFD,MAEO;AACH,0BAAO,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEP,KAAK,CAACG,KAA5B;AAAmC,QAAA,UAAU,EAAEH,KAAK,CAACO,UAArD;AAAiE,QAAA,cAAc,EAAE;AAAjF;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ,GAND;;AAQA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAGP,QAAQ,KAAK,SAAhB,EAA2B;AACvB,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKG,gBAAgB;AADrB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAMO,IAAGH,QAAQ,KAAK,aAAhB,EAA+B;AAClC,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACKK,gBAAgB;AADrB;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ,GAdD;;AAeA,sBAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACA;AAAA,iBACKJ,iBAAiB,EADtB,EAEKM,cAAc,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CA3DD;;GAAMT,iB;UAQmBN,W;;;KARnBM,iB;;AA8DN,MAAMU,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHL,IAAAA,UAAU,EAAEK,KAAK,CAACC,MAAN,CAAaN,UADtB;AAEHE,IAAAA,UAAU,EAAEG,KAAK,CAACC,MAAN,CAAaJ,UAFtB;AAGHJ,IAAAA,KAAK,EAAEO,KAAK,CAACE,KAAN,CAAYT;AAHhB,GAAP;AAMH,CAPD;;AASA,eAAeL,OAAO,CAClBW,eADkB,EAElB;AACIb,EAAAA,eADJ;AAEIC,EAAAA;AAFJ,CAFkB,CAAP,CAMbE,iBANa,CAAf","sourcesContent":["import React,  { useEffect } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport AllEventCards from './AllEventCards';\r\nimport { fetchCurrEvents } from '../../../actions';\r\nimport { fetchPastEvents } from '../../../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n\r\nconst ShowAllEventCards = (props) => {\r\n    const { fetchCurrEvents, fetchPastEvents } = props\r\n    useEffect( () => {\r\n        fetchCurrEvents();\r\n        fetchPastEvents();\r\n     }, [fetchCurrEvents, fetchPastEvents]);\r\n     \r\n\r\n    const { pathname } = useLocation();\r\n\r\n    const adminControlPanel = () => {\r\n        if(props.token) {\r\n            return (\r\n                <Link to=\"/admin/createEvent\" className=\"btn btn-primary btn-block\">Create Event</Link>\r\n            )\r\n        }\r\n    }\r\n    \r\n    const currEventsLoader = () => {\r\n        if (!props.currEvents) {\r\n            return 'loading'\r\n        } else {\r\n            return <AllEventCards token={props.token} eventsList={props.currEvents} previousEvents={false}/>\r\n        }\r\n    }\r\n\r\n    const pastEventsLoader = () => {\r\n        if (!props.pastEvents) {\r\n            return 'loading'\r\n        } else {\r\n            return <AllEventCards token={props.token} eventsList={props.pastEvents} previousEvents={true} />\r\n        }\r\n    }\r\n\r\n    const eventsSelector = () => {\r\n        if(pathname === '/events') {\r\n            return (\r\n                <div className=\"container\">\r\n                    {currEventsLoader()}\r\n                </div>\r\n            )\r\n        } else if(pathname === '/pastevents') {\r\n            return (\r\n                <div className=\"container\">\r\n                    {pastEventsLoader()}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n        <div>\r\n            {adminControlPanel()}\r\n            {eventsSelector()}\r\n        </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currEvents: state.events.currEvents,\r\n        pastEvents: state.events.pastEvents,\r\n        token: state.admin.token\r\n\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { \r\n        fetchCurrEvents, \r\n        fetchPastEvents \r\n    }\r\n)(ShowAllEventCards);\r\n"]},"metadata":{},"sourceType":"module"}