{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digel\\\\Desktop\\\\repos\\\\RCFD-Website-with-React\\\\src\\\\components\\\\events\\\\Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport EventCards from './EventCards';\nimport fetchEvents from '../../APIS/events';\nimport { fetchCurrEvents } from '../../actions';\nimport { fetchPastEvents } from '../../actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Events = props => {\n  _s();\n\n  // const [ currEvents, setCurrEvents ] = useState(null)\n  // const [ pastEvents, setPastEvents ] = useState(null)\n  // const currEventsList = async () => {\n  //     const res = await fetchEvents.get('/events');\n  //     setCurrEvents(res.data);\n  //     console.log(res.data);\n  // }\n  // const pastEventsList = async () => {\n  //     const res = await fetchEvents.get('/pastevents');\n  //     setPastEvents(res.data);\n  //     console.log(res.data);\n  // }\n  useEffect(() => {\n    // currEventsList();\n    // pastEventsList();\n    console.log(\"props for useEffect are:\");\n    console.log(props);\n    props.fetchCurrEvents();\n    props.fetchPastEvents();\n  }, []);\n  const {\n    pathname\n  } = useLocation();\n\n  const adminControlPanel = () => {\n    if (props.token) {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/admin/createEvent\",\n        className: \"btn btn-primary btn-block\",\n        children: \"Create Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const currEventsLoader = () => {\n    if (!props.currEvents) {\n      return 'loading';\n    } else {\n      return /*#__PURE__*/_jsxDEV(EventCards, {\n        token: props.token,\n        eventsList: props.currEvents,\n        previousEvents: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const pastEventsLoader = () => {\n    if (!props.pastEvents) {\n      return 'loading';\n    } else {\n      return /*#__PURE__*/_jsxDEV(EventCards, {\n        token: props.token,\n        eventsList: props.pastEvents,\n        previousEvents: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  const eventsSelector = () => {\n    if (pathname === '/events') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: currEventsLoader()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    } else if (pathname === '/pastevents') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pastEventsLoader()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [adminControlPanel(), eventsSelector()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}; // export default Events;\n\n\n_s(Events, \"phQmLxtOqIUVIYJLzR0dXkT9ZwI=\", false, function () {\n  return [useLocation];\n});\n\n_c = Events;\n\nconst mapStateToProps = state => {\n  return {\n    currEvents: state.events.currEvents,\n    pastEvents: state.events.pastEvents,\n    token: state.admin.token\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchCurrEvents,\n  fetchPastEvents\n})(Events);\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["C:/Users/Digel/Desktop/repos/RCFD-Website-with-React/src/components/events/Events.js"],"names":["React","useState","useEffect","useLocation","Link","EventCards","fetchEvents","fetchCurrEvents","fetchPastEvents","connect","Events","props","console","log","pathname","adminControlPanel","token","currEventsLoader","currEvents","pastEventsLoader","pastEvents","eventsSelector","mapStateToProps","state","events","admin"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport EventCards from './EventCards';\r\nimport fetchEvents from '../../APIS/events';\r\nimport { fetchCurrEvents } from '../../actions';\r\nimport { fetchPastEvents } from '../../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n\r\nconst Events = (props) => {\r\n    // const [ currEvents, setCurrEvents ] = useState(null)\r\n    // const [ pastEvents, setPastEvents ] = useState(null)\r\n\r\n    // const currEventsList = async () => {\r\n    //     const res = await fetchEvents.get('/events');\r\n    //     setCurrEvents(res.data);\r\n    //     console.log(res.data);\r\n       \r\n    // }\r\n\r\n    // const pastEventsList = async () => {\r\n    //     const res = await fetchEvents.get('/pastevents');\r\n    //     setPastEvents(res.data);\r\n    //     console.log(res.data);\r\n       \r\n    // }\r\n\r\n    useEffect( () => {\r\n        // currEventsList();\r\n        // pastEventsList();\r\n        console.log(\"props for useEffect are:\")\r\n        console.log(props)\r\n        props.fetchCurrEvents();\r\n        props.fetchPastEvents();\r\n     }, []);\r\n     \r\n\r\n    const { pathname } = useLocation();\r\n\r\n    const adminControlPanel = () => {\r\n        if(props.token) {\r\n            return (\r\n                <Link to=\"/admin/createEvent\" className=\"btn btn-primary btn-block\">Create Event</Link>\r\n            )\r\n        }\r\n    }\r\n    \r\n    const currEventsLoader = () => {\r\n        if (!props.currEvents) {\r\n            return 'loading'\r\n        } else {\r\n            return <EventCards token={props.token} eventsList={props.currEvents} previousEvents={false}/>\r\n        }\r\n    }\r\n\r\n    const pastEventsLoader = () => {\r\n        if (!props.pastEvents) {\r\n            return 'loading'\r\n        } else {\r\n            return <EventCards token={props.token} eventsList={props.pastEvents} previousEvents={true} />\r\n        }\r\n    }\r\n    \r\n\r\n    const eventsSelector = () => {\r\n        if(pathname === '/events') {\r\n            return (\r\n                <div>\r\n                    {currEventsLoader()}\r\n                </div>\r\n            )\r\n        } else if(pathname === '/pastevents') {\r\n            return (\r\n                <div>\r\n                    {pastEventsLoader()}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div className=\"container\">\r\n        <div>\r\n            {adminControlPanel()}\r\n            {eventsSelector()}\r\n        </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n// export default Events;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currEvents: state.events.currEvents,\r\n        pastEvents: state.events.pastEvents,\r\n        token: state.admin.token\r\n\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { \r\n        fetchCurrEvents, \r\n        fetchPastEvents \r\n    }\r\n)(Events);\r\n"]},"metadata":{},"sourceType":"module"}