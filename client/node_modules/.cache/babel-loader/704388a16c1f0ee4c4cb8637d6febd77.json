{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digel\\\\Desktop\\\\repos\\\\RCFD-Website-with-React\\\\src\\\\components\\\\admin\\\\EditEvent.js\",\n    _s = $RefreshSig$();\n\nimport EventForm from './EventForm';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchEvent, editEvent } from '../../actions';\nimport { connect } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditEvent = props => {\n  _s();\n\n  const {\n    eventInfo,\n    editEvent,\n    fetchEvent,\n    selectedEvent\n  } = props;\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    console.log(\"triggered form submit\");\n    const {\n      businessName,\n      city,\n      date,\n      description,\n      endTime,\n      eventURL,\n      excerpt,\n      image,\n      name,\n      postcode,\n      startTime,\n      streetNumber,\n      streetName\n    } = eventInfo;\n    const formValues = {\n      businessName,\n      city,\n      date,\n      description,\n      endTime,\n      eventURL,\n      excerpt,\n      image,\n      name,\n      postcode,\n      startTime,\n      streetNumber,\n      streetName\n    };\n    editEvent(id, formValues);\n    navigate(\"/events\", {\n      replace: true\n    });\n  };\n\n  useEffect(() => {\n    fetchEvent(id);\n  }, [fetchEvent, id]);\n\n  if (selectedEvent) {\n    return /*#__PURE__*/_jsxDEV(EventForm, {\n      formSubmitHandler: formSubmitHandler,\n      selectedEvent: selectedEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(EditEvent, \"jBhyhCnGnTynLG86SR547tPdgyU=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = EditEvent;\n\nconst mapStateToProps = state => {\n  return {\n    eventInfo: { ...state.admin\n    },\n    selectedEvent: state.events.selectedEvent\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchEvent,\n  editEvent\n})(EditEvent);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditEvent\");","map":{"version":3,"sources":["C:/Users/Digel/Desktop/repos/RCFD-Website-with-React/src/components/admin/EditEvent.js"],"names":["EventForm","useEffect","useParams","fetchEvent","editEvent","connect","useNavigate","EditEvent","props","eventInfo","selectedEvent","id","navigate","formSubmitHandler","e","preventDefault","console","log","businessName","city","date","description","endTime","eventURL","excerpt","image","name","postcode","startTime","streetNumber","streetName","formValues","replace","mapStateToProps","state","admin","events"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,eAAtC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAUC,WAAV,QAA6B,kBAA7B;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAO;AAACC,IAAAA,SAAD;AAAYL,IAAAA,SAAZ;AAAuBD,IAAAA,UAAvB;AAAmCO,IAAAA;AAAnC,MAAqDF,KAA5D;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAST,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGN,WAAW,EAA5B;;AACA,QAAMO,iBAAiB,GAAGC,CAAC,IAAI;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,UAAM;AAAEC,MAAAA,YAAF;AACFC,MAAAA,IADE;AAEFC,MAAAA,IAFE;AAGFC,MAAAA,WAHE;AAIFC,MAAAA,OAJE;AAKFC,MAAAA,QALE;AAMFC,MAAAA,OANE;AAOFC,MAAAA,KAPE;AAQFC,MAAAA,IARE;AASFC,MAAAA,QATE;AAUFC,MAAAA,SAVE;AAWFC,MAAAA,YAXE;AAYFC,MAAAA;AAZE,QAYYrB,SAZlB;AAcA,UAAMsB,UAAU,GAAG;AACfb,MAAAA,YADe;AAEfC,MAAAA,IAFe;AAGfC,MAAAA,IAHe;AAIfC,MAAAA,WAJe;AAKfC,MAAAA,OALe;AAMfC,MAAAA,QANe;AAOfC,MAAAA,OAPe;AAQfC,MAAAA,KARe;AASfC,MAAAA,IATe;AAUfC,MAAAA,QAVe;AAWfC,MAAAA,SAXe;AAYfC,MAAAA,YAZe;AAafC,MAAAA;AAbe,KAAnB;AAeA1B,IAAAA,SAAS,CAACO,EAAD,EAAKoB,UAAL,CAAT;AACAnB,IAAAA,QAAQ,CAAC,SAAD,EAAY;AAAEoB,MAAAA,OAAO,EAAC;AAAV,KAAZ,CAAR;AACD,GAlCH;;AAuCA/B,EAAAA,SAAS,CAAE,MAAM;AACbE,IAAAA,UAAU,CAACQ,EAAD,CAAV;AACF,GAFO,EAEL,CAACR,UAAD,EAAaQ,EAAb,CAFK,CAAT;;AAIA,MAAID,aAAJ,EAAmB;AACf,wBACI,QAAC,SAAD;AAAW,MAAA,iBAAiB,EAAEG,iBAA9B;AAAiD,MAAA,aAAa,EAAGH;AAAjE;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAJD,MAIO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;AACJ,CAzDD;;GAAMH,S;UAGaL,S,EACEI,W;;;KAJfC,S;;AA2DN,MAAM0B,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHzB,IAAAA,SAAS,EAAE,EAAC,GAAGyB,KAAK,CAACC;AAAV,KADR;AAEHzB,IAAAA,aAAa,EAAEwB,KAAK,CAACE,MAAN,CAAa1B;AAFzB,GAAP;AAIH,CALD;;AAOA,eAAeL,OAAO,CAClB4B,eADkB,EAElB;AAAE9B,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAFkB,CAAP,CAGTG,SAHS,CAAf","sourcesContent":["import EventForm from './EventForm';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { fetchEvent, editEvent } from '../../actions'\r\nimport { connect } from 'react-redux';\r\nimport  { useNavigate } from 'react-router-dom';\r\n\r\nconst EditEvent = (props) => {\r\n    const  {eventInfo, editEvent, fetchEvent, selectedEvent } = props;\r\n\r\n    const { id } = useParams()\r\n    const navigate = useNavigate()\r\n    const formSubmitHandler = e => {\r\n        e.preventDefault()\r\n        console.log(\"triggered form submit\")\r\n        const { businessName,\r\n            city,\r\n            date,\r\n            description,\r\n            endTime,\r\n            eventURL,\r\n            excerpt,\r\n            image,\r\n            name,\r\n            postcode,\r\n            startTime,\r\n            streetNumber,\r\n            streetName} = eventInfo;\r\n\r\n        const formValues = {\r\n            businessName,\r\n            city,\r\n            date,\r\n            description,\r\n            endTime,\r\n            eventURL,\r\n            excerpt,\r\n            image,\r\n            name,\r\n            postcode,\r\n            startTime,\r\n            streetNumber,\r\n            streetName\r\n        }\r\n        editEvent(id, formValues);\r\n        navigate(\"/events\", { replace:true })\r\n      }\r\n\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        fetchEvent(id)\r\n     }, [fetchEvent, id]);\r\n\r\n    if (selectedEvent) { \r\n        return (\r\n            <EventForm formSubmitHandler={formSubmitHandler} selectedEvent={ selectedEvent } />\r\n        )\r\n    } else {\r\n        return (\r\n            <p>Loading</p>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        eventInfo: {...state.admin},\r\n        selectedEvent: state.events.selectedEvent\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { fetchEvent, editEvent }\r\n    )(EditEvent);"]},"metadata":{},"sourceType":"module"}